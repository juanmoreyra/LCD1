
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800587c  0800587c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800587c  0800587c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800587c  0800587c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  20000018  0800589c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de8  0800589c  00021de8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011332  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a68  00000000  00000000  00031373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00033de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f1e  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011767  00000000  00000000  0004da1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4ed  00000000  00000000  0005f185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000ea6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fc8 	.word	0x08004fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004fc8 	.word	0x08004fc8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fd3a 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f838 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8aa 	bl	80002b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000160:	f000 f87a 	bl	8000258 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_I2C_Init();
  SSD1306_Init();
 8000164:	f000 f9aa 	bl	80004bc <SSD1306_Init>
  SSD1306_Clear();
 8000168:	f000 fbcb 	bl	8000902 <SSD1306_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 f9be 	bl	80024ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000170:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <main+0x58>)
 8000172:	2100      	movs	r1, #0
 8000174:	480d      	ldr	r0, [pc, #52]	; (80001ac <main+0x5c>)
 8000176:	f002 fa1f 	bl	80025b8 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a0c      	ldr	r2, [pc, #48]	; (80001b0 <main+0x60>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of sensor */
  sensorHandle = osThreadNew(entrySensor1, NULL, &sensor_attributes);
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <main+0x64>)
 8000182:	2100      	movs	r1, #0
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <main+0x68>)
 8000186:	f002 fa17 	bl	80025b8 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0b      	ldr	r2, [pc, #44]	; (80001bc <main+0x6c>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of NOMBRE */
  NOMBREHandle = osThreadNew(NombreApellido, NULL, &NOMBRE_attributes);
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <main+0x70>)
 8000192:	2100      	movs	r1, #0
 8000194:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x74>)
 8000196:	f002 fa0f 	bl	80025b8 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <main+0x78>)
 800019e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a0:	f002 f9d6 	bl	8002550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <main+0x54>
 80001a6:	bf00      	nop
 80001a8:	080057d0 	.word	0x080057d0
 80001ac:	080003d1 	.word	0x080003d1
 80001b0:	20000088 	.word	0x20000088
 80001b4:	080057f4 	.word	0x080057f4
 80001b8:	0800041d 	.word	0x0800041d
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	08005818 	.word	0x08005818
 80001c4:	08000475 	.word	0x08000475
 80001c8:	20000090 	.word	0x20000090

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f004 feaa 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f001 fd63 	bl	8001ce0 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000220:	f000 f946 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 ffd0 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024a:	f000 f931 	bl	80004b0 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_I2C1_Init+0x50>)
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <MX_I2C1_Init+0x54>)
 8000260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000264:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x58>)
 8000266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000296:	f000 ffab 	bl	80011f0 <HAL_I2C_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a0:	f000 f906 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000034 	.word	0x20000034
 80002ac:	40005400 	.word	0x40005400
 80002b0:	00061a80 	.word	0x00061a80

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a23      	ldr	r2, [pc, #140]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_GPIO_Init+0xa8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_GPIO_Init+0xa8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0320 	and.w	r3, r3, #32
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MX_GPIO_Init+0xa8>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <MX_GPIO_Init+0xa8>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_GPIO_Init+0xac>)
 8000330:	f000 ff2d 	bl	800118e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_GPIO_Init+0xac>)
 800034e:	f000 fd83 	bl	8000e58 <HAL_GPIO_Init>

}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40011000 	.word	0x40011000

08000364 <ImprimirLinea>:

/* USER CODE BEGIN 4 */
void ImprimirLinea(char *s, uint8_t linea) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	taskENTER_CRITICAL();
 8000370:	f004 fabc 	bl	80048ec <vPortEnterCritical>
	/* "borra" la línea para poder escribir en limpio */
	SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	3b01      	subs	r3, #1
 8000378:	b29b      	uxth	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	00d2      	lsls	r2, r2, #3
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	b29b      	uxth	r3, r3
 8000384:	4619      	mov	r1, r3
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fa00 	bl	800078c <SSD1306_GotoXY>
	SSD1306_Puts(" ", &Font_7x10, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	490e      	ldr	r1, [pc, #56]	; (80003c8 <ImprimirLinea+0x64>)
 8000390:	480e      	ldr	r0, [pc, #56]	; (80003cc <ImprimirLinea+0x68>)
 8000392:	f000 fa91 	bl	80008b8 <SSD1306_Puts>
	/* imprime la cadena */
	SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	3b01      	subs	r3, #1
 800039a:	b29b      	uxth	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	00d2      	lsls	r2, r2, #3
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f9ef 	bl	800078c <SSD1306_GotoXY>
	SSD1306_Puts(s, &Font_7x10, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	4905      	ldr	r1, [pc, #20]	; (80003c8 <ImprimirLinea+0x64>)
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f000 fa80 	bl	80008b8 <SSD1306_Puts>
	/*actualiza pantalla*/
	SSD1306_UpdateScreen();
 80003b8:	f000 f944 	bl	8000644 <SSD1306_UpdateScreen>
	taskEXIT_CRITICAL();
 80003bc:	f004 fac6 	bl	800494c <vPortExitCritical>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000000 	.word	0x20000000
 80003cc:	08004ffc 	.word	0x08004ffc

080003d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <StartDefaultTask+0x40>)
 80003de:	f000 feee 	bl	80011be <HAL_GPIO_TogglePin>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <StartDefaultTask+0x40>)
 80003e8:	f000 feba 	bl	8001160 <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d004      	beq.n	80003fc <StartDefaultTask+0x2c>
			ImprimirLinea("LED = OFF", 1);
 80003f2:	2101      	movs	r1, #1
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <StartDefaultTask+0x44>)
 80003f6:	f7ff ffb5 	bl	8000364 <ImprimirLinea>
 80003fa:	e003      	b.n	8000404 <StartDefaultTask+0x34>
		} else {
			ImprimirLinea("LED = ON ", 1);
 80003fc:	2101      	movs	r1, #1
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <StartDefaultTask+0x48>)
 8000400:	f7ff ffb0 	bl	8000364 <ImprimirLinea>
		}
		osDelay(1000);
 8000404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000408:	f002 f980 	bl	800270c <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800040c:	e7e4      	b.n	80003d8 <StartDefaultTask+0x8>
 800040e:	bf00      	nop
 8000410:	40011000 	.word	0x40011000
 8000414:	08005000 	.word	0x08005000
 8000418:	0800500c 	.word	0x0800500c

0800041c <entrySensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySensor1 */
void entrySensor1(void *argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entrySensor1 */

  /* Infinite loop */
	int sensor = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
	char val[20] = "sensor1 = ";
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <entrySensor1+0x54>)
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000430:	c303      	stmia	r3!, {r0, r1}
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	3302      	adds	r3, #2
 8000436:	0c12      	lsrs	r2, r2, #16
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	f107 0313 	add.w	r3, r7, #19
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	721a      	strb	r2, [r3, #8]
	for (;;) {
		/* convierte el valor del sensor a ascii y lo
		 concatena al final de "sensor2 = " */
		itoa(sensor, val + 10, 10);
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	330a      	adds	r3, #10
 800044c:	220a      	movs	r2, #10
 800044e:	4619      	mov	r1, r3
 8000450:	69f8      	ldr	r0, [r7, #28]
 8000452:	f004 fd5f 	bl	8004f14 <itoa>
		ImprimirLinea(val, 2);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	2102      	movs	r1, #2
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff81 	bl	8000364 <ImprimirLinea>
		sensor++;
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	3301      	adds	r3, #1
 8000466:	61fb      	str	r3, [r7, #28]
		osDelay(100);
 8000468:	2064      	movs	r0, #100	; 0x64
 800046a:	f002 f94f 	bl	800270c <osDelay>
		itoa(sensor, val + 10, 10);
 800046e:	e7ea      	b.n	8000446 <entrySensor1+0x2a>
 8000470:	08005018 	.word	0x08005018

08000474 <NombreApellido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NombreApellido */
void NombreApellido(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NombreApellido */

	/* Infinite loop */
  int m=0;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
	for(;;)
  {
		if (m==0) {
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d106      	bne.n	8000494 <NombreApellido+0x20>
			ImprimirLinea("MOREYRA", 3);
 8000486:	2103      	movs	r1, #3
 8000488:	4807      	ldr	r0, [pc, #28]	; (80004a8 <NombreApellido+0x34>)
 800048a:	f7ff ff6b 	bl	8000364 <ImprimirLinea>
			m=1;
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e005      	b.n	80004a0 <NombreApellido+0x2c>
		} else {
			ImprimirLinea("JUAN   ", 3);
 8000494:	2103      	movs	r1, #3
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <NombreApellido+0x38>)
 8000498:	f7ff ff64 	bl	8000364 <ImprimirLinea>
			m=0;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
		}
		osDelay(200);
 80004a0:	20c8      	movs	r0, #200	; 0xc8
 80004a2:	f002 f933 	bl	800270c <osDelay>
		if (m==0) {
 80004a6:	e7eb      	b.n	8000480 <NombreApellido+0xc>
 80004a8:	0800502c 	.word	0x0800502c
 80004ac:	08005034 	.word	0x08005034

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80004c2:	f000 fa27 	bl	8000914 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80004c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004ca:	2201      	movs	r2, #1
 80004cc:	2178      	movs	r1, #120	; 0x78
 80004ce:	485b      	ldr	r0, [pc, #364]	; (800063c <SSD1306_Init+0x180>)
 80004d0:	f001 f8d0 	bl	8001674 <HAL_I2C_IsDeviceReady>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	e0a9      	b.n	8000632 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80004de:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004e4:	e002      	b.n	80004ec <SSD1306_Init+0x30>
		p--;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1f9      	bne.n	80004e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80004f2:	22ae      	movs	r2, #174	; 0xae
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	; 0x78
 80004f8:	f000 fa86 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80004fc:	2220      	movs	r2, #32
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	; 0x78
 8000502:	f000 fa81 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000506:	2210      	movs	r2, #16
 8000508:	2100      	movs	r1, #0
 800050a:	2078      	movs	r0, #120	; 0x78
 800050c:	f000 fa7c 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000510:	22b0      	movs	r2, #176	; 0xb0
 8000512:	2100      	movs	r1, #0
 8000514:	2078      	movs	r0, #120	; 0x78
 8000516:	f000 fa77 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	2100      	movs	r1, #0
 800051e:	2078      	movs	r0, #120	; 0x78
 8000520:	f000 fa72 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 fa6d 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800052e:	2210      	movs	r2, #16
 8000530:	2100      	movs	r1, #0
 8000532:	2078      	movs	r0, #120	; 0x78
 8000534:	f000 fa68 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	2100      	movs	r1, #0
 800053c:	2078      	movs	r0, #120	; 0x78
 800053e:	f000 fa63 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000542:	2281      	movs	r2, #129	; 0x81
 8000544:	2100      	movs	r1, #0
 8000546:	2078      	movs	r0, #120	; 0x78
 8000548:	f000 fa5e 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	2100      	movs	r1, #0
 8000550:	2078      	movs	r0, #120	; 0x78
 8000552:	f000 fa59 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000556:	22a1      	movs	r2, #161	; 0xa1
 8000558:	2100      	movs	r1, #0
 800055a:	2078      	movs	r0, #120	; 0x78
 800055c:	f000 fa54 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000560:	22a6      	movs	r2, #166	; 0xa6
 8000562:	2100      	movs	r1, #0
 8000564:	2078      	movs	r0, #120	; 0x78
 8000566:	f000 fa4f 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800056a:	22a8      	movs	r2, #168	; 0xa8
 800056c:	2100      	movs	r1, #0
 800056e:	2078      	movs	r0, #120	; 0x78
 8000570:	f000 fa4a 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000574:	223f      	movs	r2, #63	; 0x3f
 8000576:	2100      	movs	r1, #0
 8000578:	2078      	movs	r0, #120	; 0x78
 800057a:	f000 fa45 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800057e:	22a4      	movs	r2, #164	; 0xa4
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	; 0x78
 8000584:	f000 fa40 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000588:	22d3      	movs	r2, #211	; 0xd3
 800058a:	2100      	movs	r1, #0
 800058c:	2078      	movs	r0, #120	; 0x78
 800058e:	f000 fa3b 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	; 0x78
 8000598:	f000 fa36 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800059c:	22d5      	movs	r2, #213	; 0xd5
 800059e:	2100      	movs	r1, #0
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 fa31 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005a6:	22f0      	movs	r2, #240	; 0xf0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2078      	movs	r0, #120	; 0x78
 80005ac:	f000 fa2c 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005b0:	22d9      	movs	r2, #217	; 0xd9
 80005b2:	2100      	movs	r1, #0
 80005b4:	2078      	movs	r0, #120	; 0x78
 80005b6:	f000 fa27 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005ba:	2222      	movs	r2, #34	; 0x22
 80005bc:	2100      	movs	r1, #0
 80005be:	2078      	movs	r0, #120	; 0x78
 80005c0:	f000 fa22 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80005c4:	22da      	movs	r2, #218	; 0xda
 80005c6:	2100      	movs	r1, #0
 80005c8:	2078      	movs	r0, #120	; 0x78
 80005ca:	f000 fa1d 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80005ce:	2212      	movs	r2, #18
 80005d0:	2100      	movs	r1, #0
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f000 fa18 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80005d8:	22db      	movs	r2, #219	; 0xdb
 80005da:	2100      	movs	r1, #0
 80005dc:	2078      	movs	r0, #120	; 0x78
 80005de:	f000 fa13 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80005e2:	2220      	movs	r2, #32
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 fa0e 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005ec:	228d      	movs	r2, #141	; 0x8d
 80005ee:	2100      	movs	r1, #0
 80005f0:	2078      	movs	r0, #120	; 0x78
 80005f2:	f000 fa09 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80005f6:	2214      	movs	r2, #20
 80005f8:	2100      	movs	r1, #0
 80005fa:	2078      	movs	r0, #120	; 0x78
 80005fc:	f000 fa04 	bl	8000a08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000600:	22af      	movs	r2, #175	; 0xaf
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 f9ff 	bl	8000a08 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800060a:	222e      	movs	r2, #46	; 0x2e
 800060c:	2100      	movs	r1, #0
 800060e:	2078      	movs	r0, #120	; 0x78
 8000610:	f000 f9fa 	bl	8000a08 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 f843 	bl	80006a0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800061a:	f000 f813 	bl	8000644 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <SSD1306_Init+0x184>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <SSD1306_Init+0x184>)
 8000626:	2200      	movs	r2, #0
 8000628:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SSD1306_Init+0x184>)
 800062c:	2201      	movs	r2, #1
 800062e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000034 	.word	0x20000034
 8000640:	20000494 	.word	0x20000494

08000644 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e01d      	b.n	800068c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3b50      	subs	r3, #80	; 0x50
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	2078      	movs	r0, #120	; 0x78
 800065c:	f000 f9d4 	bl	8000a08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2078      	movs	r0, #120	; 0x78
 8000666:	f000 f9cf 	bl	8000a08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800066a:	2210      	movs	r2, #16
 800066c:	2100      	movs	r1, #0
 800066e:	2078      	movs	r0, #120	; 0x78
 8000670:	f000 f9ca 	bl	8000a08 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	01db      	lsls	r3, r3, #7
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <SSD1306_UpdateScreen+0x58>)
 800067a:	441a      	add	r2, r3
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	2078      	movs	r0, #120	; 0x78
 8000682:	f000 f95b 	bl	800093c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3301      	adds	r3, #1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b07      	cmp	r3, #7
 8000690:	d9de      	bls.n	8000650 <SSD1306_UpdateScreen+0xc>
	}
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000094 	.word	0x20000094

080006a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d101      	bne.n	80006b4 <SSD1306_Fill+0x14>
 80006b0:	2300      	movs	r3, #0
 80006b2:	e000      	b.n	80006b6 <SSD1306_Fill+0x16>
 80006b4:	23ff      	movs	r3, #255	; 0xff
 80006b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ba:	4619      	mov	r1, r3
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <SSD1306_Fill+0x2c>)
 80006be:	f004 fc39 	bl	8004f34 <memset>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000094 	.word	0x20000094

080006d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
 80006da:	460b      	mov	r3, r1
 80006dc:	80bb      	strh	r3, [r7, #4]
 80006de:	4613      	mov	r3, r2
 80006e0:	70fb      	strb	r3, [r7, #3]
	if (
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b7f      	cmp	r3, #127	; 0x7f
 80006e6:	d848      	bhi.n	800077a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	2b3f      	cmp	r3, #63	; 0x3f
 80006ec:	d845      	bhi.n	800077a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SSD1306_DrawPixel+0xb4>)
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d11a      	bne.n	8000740 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800070a:	88fa      	ldrh	r2, [r7, #6]
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	b298      	uxth	r0, r3
 8000712:	4603      	mov	r3, r0
 8000714:	01db      	lsls	r3, r3, #7
 8000716:	4413      	add	r3, r2
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <SSD1306_DrawPixel+0xb8>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	b25a      	sxtb	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	f003 0307 	and.w	r3, r3, #7
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	b25b      	sxtb	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	b259      	sxtb	r1, r3
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	4603      	mov	r3, r0
 8000734:	01db      	lsls	r3, r3, #7
 8000736:	4413      	add	r3, r2
 8000738:	b2c9      	uxtb	r1, r1
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <SSD1306_DrawPixel+0xb8>)
 800073c:	54d1      	strb	r1, [r2, r3]
 800073e:	e01d      	b.n	800077c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	88bb      	ldrh	r3, [r7, #4]
 8000744:	08db      	lsrs	r3, r3, #3
 8000746:	b298      	uxth	r0, r3
 8000748:	4603      	mov	r3, r0
 800074a:	01db      	lsls	r3, r3, #7
 800074c:	4413      	add	r3, r2
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <SSD1306_DrawPixel+0xb8>)
 8000750:	5cd3      	ldrb	r3, [r2, r3]
 8000752:	b25a      	sxtb	r2, r3
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	b25b      	sxtb	r3, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4013      	ands	r3, r2
 8000768:	b259      	sxtb	r1, r3
 800076a:	88fa      	ldrh	r2, [r7, #6]
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	b2c9      	uxtb	r1, r1
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <SSD1306_DrawPixel+0xb8>)
 8000776:	54d1      	strb	r1, [r2, r3]
 8000778:	e000      	b.n	800077c <SSD1306_DrawPixel+0xac>
		return;
 800077a:	bf00      	nop
	}
}
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000494 	.word	0x20000494
 8000788:	20000094 	.word	0x20000094

0800078c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	80fb      	strh	r3, [r7, #6]
 8000798:	4613      	mov	r3, r2
 800079a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <SSD1306_GotoXY+0x28>)
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <SSD1306_GotoXY+0x28>)
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	8053      	strh	r3, [r2, #2]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000494 	.word	0x20000494

080007b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007c8:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <SSD1306_Putc+0xfc>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
	if (
 80007d4:	2b7f      	cmp	r3, #127	; 0x7f
 80007d6:	dc07      	bgt.n	80007e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80007d8:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <SSD1306_Putc+0xfc>)
 80007da:	885b      	ldrh	r3, [r3, #2]
 80007dc:	461a      	mov	r2, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007e4:	2b3f      	cmp	r3, #63	; 0x3f
 80007e6:	dd01      	ble.n	80007ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e05e      	b.n	80008aa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e04b      	b.n	800088a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b20      	subs	r3, #32
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	7849      	ldrb	r1, [r1, #1]
 80007fe:	fb01 f303 	mul.w	r3, r1, r3
 8000802:	4619      	mov	r1, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	e030      	b.n	8000878 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d010      	beq.n	8000848 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <SSD1306_Putc+0xfc>)
 8000828:	881a      	ldrh	r2, [r3, #0]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	b29b      	uxth	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b298      	uxth	r0, r3
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <SSD1306_Putc+0xfc>)
 8000834:	885a      	ldrh	r2, [r3, #2]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	b29b      	uxth	r3, r3
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	4619      	mov	r1, r3
 8000842:	f7ff ff45 	bl	80006d0 <SSD1306_DrawPixel>
 8000846:	e014      	b.n	8000872 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <SSD1306_Putc+0xfc>)
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	b29b      	uxth	r3, r3
 8000850:	4413      	add	r3, r2
 8000852:	b298      	uxth	r0, r3
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <SSD1306_Putc+0xfc>)
 8000856:	885a      	ldrh	r2, [r3, #2]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	b29b      	uxth	r3, r3
 800085c:	4413      	add	r3, r2
 800085e:	b299      	uxth	r1, r3
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	f7ff ff2f 	bl	80006d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	3301      	adds	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4293      	cmp	r3, r2
 8000882:	d3c8      	bcc.n	8000816 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3301      	adds	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	461a      	mov	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	4293      	cmp	r3, r2
 8000894:	d3ad      	bcc.n	80007f2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <SSD1306_Putc+0xfc>)
 8000898:	881a      	ldrh	r2, [r3, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <SSD1306_Putc+0xfc>)
 80008a6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000494 	.word	0x20000494

080008b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	4613      	mov	r3, r2
 80008c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80008c6:	e012      	b.n	80008ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff71 	bl	80007b8 <SSD1306_Putc>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d002      	beq.n	80008e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	e008      	b.n	80008fa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e8      	bne.n	80008c8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feca 	bl	80006a0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800090c:	f7ff fe9a 	bl	8000644 <SSD1306_UpdateScreen>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <ssd1306_I2C_Init+0x24>)
 800091c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800091e:	e002      	b.n	8000926 <ssd1306_I2C_Init+0x12>
		p--;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f9      	bne.n	8000920 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	0003d090 	.word	0x0003d090

0800093c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b0c7      	sub	sp, #284	; 0x11c
 8000940:	af02      	add	r7, sp, #8
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800094a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800094e:	600a      	str	r2, [r1, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000956:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800095a:	4622      	mov	r2, r4
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000962:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000966:	4602      	mov	r2, r0
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800096e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000972:	460a      	mov	r2, r1
 8000974:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000982:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000990:	e015      	b.n	80009be <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000992:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800099a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	441a      	add	r2, r3
 80009a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009a6:	3301      	adds	r3, #1
 80009a8:	7811      	ldrb	r1, [r2, #0]
 80009aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ae:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009b2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009b4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009b8:	3301      	adds	r3, #1
 80009ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009cc:	8812      	ldrh	r2, [r2, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d8df      	bhi.n	8000992 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80009d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b299      	uxth	r1, r3
 80009de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f107 020c 	add.w	r2, r7, #12
 80009f0:	200a      	movs	r0, #10
 80009f2:	9000      	str	r0, [sp, #0]
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <ssd1306_I2C_WriteMulti+0xc8>)
 80009f6:	f000 fd3f 	bl	8001478 <HAL_I2C_Master_Transmit>
}
 80009fa:	bf00      	nop
 80009fc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000034 	.word	0x20000034

08000a08 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	460b      	mov	r3, r1
 8000a14:	71bb      	strb	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a1e:	797b      	ldrb	r3, [r7, #5]
 8000a20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	b299      	uxth	r1, r3
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2302      	movs	r3, #2
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <ssd1306_I2C_Write+0x38>)
 8000a32:	f000 fd21 	bl	8001478 <HAL_I2C_Master_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000034 	.word	0x20000034

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_MspInit+0x68>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_MspInit+0x68>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_MspInit+0x68>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x68>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_MspInit+0x68>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x68>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 f9c0 	bl	8000e06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x6c>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_MspInit+0x6c>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <HAL_I2C_MspInit+0x70>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d123      	bne.n	8000b1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aec:	23c0      	movs	r3, #192	; 0xc0
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_I2C_MspInit+0x78>)
 8000b00:	f000 f9aa 	bl	8000e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0e:	61d3      	str	r3, [r2, #28]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_I2C_MspInit+0x74>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f87b 	bl	8000c58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b62:	f003 f9df 	bl	8003f24 <xTaskGetSchedulerState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d001      	beq.n	8000b70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b6c:	f003 ff3c 	bl	80049e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ffe5 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f004 f977 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff facf 	bl	8000150 <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bbc:	08005884 	.word	0x08005884
  ldr r2, =_sbss
 8000bc0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bc4:	20001de8 	.word	0x20001de8

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f907 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff ff2c 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f911 	bl	8000e3e <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f8e7 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000010 	.word	0x20000010
 8000c54:	2000000c 	.word	0x2000000c

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000010 	.word	0x20000010
 8000c78:	2000049c 	.word	0x2000049c

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	2000049c 	.word	0x2000049c

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff90 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff49 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5e 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e169      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8158 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a9a      	ldr	r2, [pc, #616]	; (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d05e      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000e94:	4a98      	ldr	r2, [pc, #608]	; (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d875      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a98      	ldr	r2, [pc, #608]	; (80010fc <HAL_GPIO_Init+0x2a4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d058      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a96      	ldr	r2, [pc, #600]	; (80010fc <HAL_GPIO_Init+0x2a4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d86f      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <HAL_GPIO_Init+0x2a8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d052      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eac:	4a94      	ldr	r2, [pc, #592]	; (8001100 <HAL_GPIO_Init+0x2a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d869      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eb2:	4a94      	ldr	r2, [pc, #592]	; (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d04c      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a92      	ldr	r2, [pc, #584]	; (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d863      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ebe:	4a92      	ldr	r2, [pc, #584]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d046      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a90      	ldr	r2, [pc, #576]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d85d      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d82a      	bhi.n	8000f24 <HAL_GPIO_Init+0xcc>
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d859      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <HAL_GPIO_Init+0x80>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f2d 	.word	0x08000f2d
 8000ee0:	08000f3f 	.word	0x08000f3f
 8000ee4:	08000f81 	.word	0x08000f81
 8000ee8:	08000f87 	.word	0x08000f87
 8000eec:	08000f87 	.word	0x08000f87
 8000ef0:	08000f87 	.word	0x08000f87
 8000ef4:	08000f87 	.word	0x08000f87
 8000ef8:	08000f87 	.word	0x08000f87
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f87 	.word	0x08000f87
 8000f04:	08000f87 	.word	0x08000f87
 8000f08:	08000f87 	.word	0x08000f87
 8000f0c:	08000f87 	.word	0x08000f87
 8000f10:	08000f87 	.word	0x08000f87
 8000f14:	08000f87 	.word	0x08000f87
 8000f18:	08000f87 	.word	0x08000f87
 8000f1c:	08000f35 	.word	0x08000f35
 8000f20:	08000f49 	.word	0x08000f49
 8000f24:	4a79      	ldr	r2, [pc, #484]	; (800110c <HAL_GPIO_Init+0x2b4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f2a:	e02c      	b.n	8000f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e029      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e024      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	3308      	adds	r3, #8
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e01f      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e01a      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e013      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d105      	bne.n	8000f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	611a      	str	r2, [r3, #16]
          break;
 8000f72:	e009      	b.n	8000f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f74:	2308      	movs	r3, #8
 8000f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	615a      	str	r2, [r3, #20]
          break;
 8000f7e:	e003      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          break;
 8000f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2bff      	cmp	r3, #255	; 0xff
 8000f8c:	d801      	bhi.n	8000f92 <HAL_GPIO_Init+0x13a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	e001      	b.n	8000f96 <HAL_GPIO_Init+0x13e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d802      	bhi.n	8000fa4 <HAL_GPIO_Init+0x14c>
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x152>
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3b08      	subs	r3, #8
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	6a39      	ldr	r1, [r7, #32]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80b1 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff0:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_GPIO_Init+0x2bc>)
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a40      	ldr	r2, [pc, #256]	; (8001118 <HAL_GPIO_Init+0x2c0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1ec>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <HAL_GPIO_Init+0x2c8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1e4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1e0>
 8001034:	2303      	movs	r3, #3
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001038:	2304      	movs	r3, #4
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001044:	2300      	movs	r3, #0
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001056:	492f      	ldr	r1, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2bc>)
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	492c      	ldr	r1, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4928      	ldr	r1, [pc, #160]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001088:	4013      	ands	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4922      	ldr	r1, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	491e      	ldr	r1, [pc, #120]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	4918      	ldr	r1, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4914      	ldr	r1, [pc, #80]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d021      	beq.n	800112c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	490e      	ldr	r1, [pc, #56]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
 80010f4:	e021      	b.n	800113a <HAL_GPIO_Init+0x2e2>
 80010f6:	bf00      	nop
 80010f8:	10320000 	.word	0x10320000
 80010fc:	10310000 	.word	0x10310000
 8001100:	10220000 	.word	0x10220000
 8001104:	10210000 	.word	0x10210000
 8001108:	10120000 	.word	0x10120000
 800110c:	10110000 	.word	0x10110000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_Init+0x304>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	43db      	mvns	r3, r3
 8001134:	4909      	ldr	r1, [pc, #36]	; (800115c <HAL_GPIO_Init+0x304>)
 8001136:	4013      	ands	r3, r2
 8001138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae8e 	bne.w	8000e6c <HAL_GPIO_Init+0x14>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	; 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]
 800119a:	4613      	mov	r3, r2
 800119c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119e:	787b      	ldrb	r3, [r7, #1]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011aa:	e003      	b.n	80011b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	041a      	lsls	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	041a      	lsls	r2, r3, #16
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43d9      	mvns	r1, r3
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	400b      	ands	r3, r1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e12b      	b.n	800145a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fc4c 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001254:	f001 f918 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8001258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a81      	ldr	r2, [pc, #516]	; (8001464 <HAL_I2C_Init+0x274>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d807      	bhi.n	8001274 <HAL_I2C_Init+0x84>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a80      	ldr	r2, [pc, #512]	; (8001468 <HAL_I2C_Init+0x278>)
 8001268:	4293      	cmp	r3, r2
 800126a:	bf94      	ite	ls
 800126c:	2301      	movls	r3, #1
 800126e:	2300      	movhi	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e006      	b.n	8001282 <HAL_I2C_Init+0x92>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4a7d      	ldr	r2, [pc, #500]	; (800146c <HAL_I2C_Init+0x27c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	bf94      	ite	ls
 800127c:	2301      	movls	r3, #1
 800127e:	2300      	movhi	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0e7      	b.n	800145a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4a78      	ldr	r2, [pc, #480]	; (8001470 <HAL_I2C_Init+0x280>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9b      	lsrs	r3, r3, #18
 8001294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_I2C_Init+0x274>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d802      	bhi.n	80012c4 <HAL_I2C_Init+0xd4>
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	e009      	b.n	80012d8 <HAL_I2C_Init+0xe8>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a69      	ldr	r2, [pc, #420]	; (8001474 <HAL_I2C_Init+0x284>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	3301      	adds	r3, #1
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	495c      	ldr	r1, [pc, #368]	; (8001464 <HAL_I2C_Init+0x274>)
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d819      	bhi.n	800132c <HAL_I2C_Init+0x13c>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e59      	subs	r1, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fbb1 f3f3 	udiv	r3, r1, r3
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800130c:	400b      	ands	r3, r1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00a      	beq.n	8001328 <HAL_I2C_Init+0x138>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1e59      	subs	r1, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001320:	3301      	adds	r3, #1
 8001322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001326:	e051      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 8001328:	2304      	movs	r3, #4
 800132a:	e04f      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d111      	bne.n	8001358 <HAL_I2C_Init+0x168>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e012      	b.n	800137e <HAL_I2C_Init+0x18e>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1e58      	subs	r0, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	0099      	lsls	r1, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	fbb0 f3f3 	udiv	r3, r0, r3
 800136e:	3301      	adds	r3, #1
 8001370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_Init+0x196>
 8001382:	2301      	movs	r3, #1
 8001384:	e022      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10e      	bne.n	80013ac <HAL_I2C_Init+0x1bc>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e58      	subs	r0, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013aa:	e00f      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e58      	subs	r0, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	0099      	lsls	r1, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	6809      	ldr	r1, [r1, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69da      	ldr	r2, [r3, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6911      	ldr	r1, [r2, #16]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68d2      	ldr	r2, [r2, #12]
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	000186a0 	.word	0x000186a0
 8001468:	001e847f 	.word	0x001e847f
 800146c:	003d08ff 	.word	0x003d08ff
 8001470:	431bde83 	.word	0x431bde83
 8001474:	10624dd3 	.word	0x10624dd3

08001478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af02      	add	r7, sp, #8
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	461a      	mov	r2, r3
 8001484:	460b      	mov	r3, r1
 8001486:	817b      	strh	r3, [r7, #10]
 8001488:	4613      	mov	r3, r2
 800148a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fbf6 	bl	8000c7c <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b20      	cmp	r3, #32
 800149c:	f040 80e0 	bne.w	8001660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2319      	movs	r3, #25
 80014a6:	2201      	movs	r2, #1
 80014a8:	4970      	ldr	r1, [pc, #448]	; (800166c <HAL_I2C_Master_Transmit+0x1f4>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 fa92 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	e0d3      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2C_Master_Transmit+0x50>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e0cc      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d007      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2221      	movs	r2, #33	; 0x21
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2210      	movs	r2, #16
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4a50      	ldr	r2, [pc, #320]	; (8001670 <HAL_I2C_Master_Transmit+0x1f8>)
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001530:	8979      	ldrh	r1, [r7, #10]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f9ca 	bl	80018d0 <I2C_MasterRequestWrite>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e08d      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800155c:	e066      	b.n	800162c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fb0c 	bl	8001b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00d      	beq.n	800158a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b04      	cmp	r3, #4
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06b      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d11b      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x188>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d017      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	6a39      	ldr	r1, [r7, #32]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fafc 	bl	8001c02 <I2C_WaitOnBTFFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2b04      	cmp	r3, #4
 8001616:	d107      	bne.n	8001628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e01a      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	d194      	bne.n	800155e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2220      	movs	r2, #32
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001660:	2302      	movs	r3, #2
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	00100002 	.word	0x00100002
 8001670:	ffff0000 	.word	0xffff0000

08001674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	460b      	mov	r3, r1
 8001682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fafa 	bl	8000c7c <HAL_GetTick>
 8001688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	f040 8111 	bne.w	80018be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2319      	movs	r3, #25
 80016a2:	2201      	movs	r2, #1
 80016a4:	4988      	ldr	r1, [pc, #544]	; (80018c8 <HAL_I2C_IsDeviceReady+0x254>)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f994 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e104      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_I2C_IsDeviceReady+0x50>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0fd      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d007      	beq.n	80016ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2224      	movs	r2, #36	; 0x24
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a70      	ldr	r2, [pc, #448]	; (80018cc <HAL_I2C_IsDeviceReady+0x258>)
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2200      	movs	r2, #0
 8001726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f952 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001744:	d103      	bne.n	800174e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0b6      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001752:	897b      	ldrh	r3, [r7, #10]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fa8b 	bl	8000c7c <HAL_GetTick>
 8001766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001796:	e025      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001798:	f7ff fa70 	bl	8000c7c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d302      	bcc.n	80017ae <HAL_I2C_IsDeviceReady+0x13a>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	22a0      	movs	r2, #160	; 0xa0
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2ba0      	cmp	r3, #160	; 0xa0
 80017ee:	d005      	beq.n	80017fc <HAL_I2C_IsDeviceReady+0x188>
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_I2C_IsDeviceReady+0x188>
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0cd      	beq.n	8001798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d129      	bne.n	8001866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2319      	movs	r3, #25
 800183e:	2201      	movs	r2, #1
 8001840:	4921      	ldr	r1, [pc, #132]	; (80018c8 <HAL_I2C_IsDeviceReady+0x254>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8c6 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e036      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e02c      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800187e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2319      	movs	r3, #25
 8001886:	2201      	movs	r2, #1
 8001888:	490f      	ldr	r1, [pc, #60]	; (80018c8 <HAL_I2C_IsDeviceReady+0x254>)
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f8a2 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e012      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	3301      	adds	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f4ff af32 	bcc.w	800170e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
  }
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	00100002 	.word	0x00100002
 80018cc:	ffff0000 	.word	0xffff0000

080018d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d006      	beq.n	80018fa <I2C_MasterRequestWrite+0x2a>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <I2C_MasterRequestWrite+0x2a>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f8:	d108      	bne.n	800190c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e00b      	b.n	8001924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	2b12      	cmp	r3, #18
 8001912:	d107      	bne.n	8001924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f84f 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00d      	beq.n	8001958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194a:	d103      	bne.n	8001954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e035      	b.n	80019c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001960:	d108      	bne.n	8001974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	e01b      	b.n	80019ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	11db      	asrs	r3, r3, #7
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f003 0306 	and.w	r3, r3, #6
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f063 030f 	orn	r3, r3, #15
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <I2C_MasterRequestWrite+0xfc>)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f875 	bl	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e010      	b.n	80019c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <I2C_MasterRequestWrite+0x100>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f865 	bl	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	00010008 	.word	0x00010008
 80019d0:	00010002 	.word	0x00010002

080019d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e4:	e025      	b.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d021      	beq.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ee:	f7ff f945 	bl	8000c7c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d302      	bcc.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d116      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e023      	b.n	8001a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	e00c      	b.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4013      	ands	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d0b6      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a90:	e051      	b.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa0:	d123      	bne.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e046      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d021      	beq.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff f8c3 	bl	8000c7c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d116      	bne.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e020      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10c      	bne.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	e00b      	b.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d18d      	bne.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b8c:	e02d      	b.n	8001bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f878 	bl	8001c84 <I2C_IsAcknowledgeFailed>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e02d      	b.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d021      	beq.n	8001bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f869 	bl	8000c7c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d116      	bne.n	8001bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f043 0220 	orr.w	r2, r3, #32
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e007      	b.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d1ca      	bne.n	8001b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c0e:	e02d      	b.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f837 	bl	8001c84 <I2C_IsAcknowledgeFailed>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e02d      	b.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c26:	d021      	beq.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c28:	f7ff f828 	bl	8000c7c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d302      	bcc.n	8001c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d1ca      	bne.n	8001c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d11b      	bne.n	8001cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e272      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e24c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff5e 	bl	8000c7c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe ff5a 	bl	8000c7c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe ff4a 	bl	8000c7c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7fe ff46 	bl	8000c7c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1ec      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe feff 	bl	8000c7c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe fefb 	bl	8000c7c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fede 	bl	8000c7c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe feda 	bl	8000c7c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e180      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe febe 	bl	8000c7c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe feba 	bl	8000c7c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e160      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 fac4 	bl	80024b0 <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fea4 	bl	8000c7c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe fea0 	bl	8000c7c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e146      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fe61 	bl	8000c7c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe fe5d 	bl	8000c7c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e103      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe fe11 	bl	8000c7c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fe0d 	bl	8000c7c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fdfb 	bl	8000c7c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fdf7 	bl	8000c7c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fdcb 	bl	8000c7c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fdc7 	bl	8000c7c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e06d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fd9b 	bl	8000c7c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fd97 	bl	8000c7c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e035      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fd84 	bl	8000c7c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fd80 	bl	8000c7c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e026      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e01e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e019      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x500>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fcd2 	bl	8000c7c <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fcce 	bl	8000c7c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc30 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800583c 	.word	0x0800583c
 80023b0:	20000008 	.word	0x20000008
 80023b4:	2000000c 	.word	0x2000000c

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b490      	push	{r4, r7}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_RCC_GetSysClockFreq+0xac>)
 80023c0:	1d3c      	adds	r4, r7, #4
 80023c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023c8:	f240 2301 	movw	r3, #513	; 0x201
 80023cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x46>
 80023f6:	e02b      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023fa:	623b      	str	r3, [r7, #32]
      break;
 80023fc:	e02b      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3328      	adds	r3, #40	; 0x28
 8002408:	443b      	add	r3, r7
 800240a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800240e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d012      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_GetSysClockFreq+0xb0>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0c5b      	lsrs	r3, r3, #17
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	3328      	adds	r3, #40	; 0x28
 8002426:	443b      	add	r3, r7
 8002428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800242c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002432:	fb03 f202 	mul.w	r2, r3, r2
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	e004      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	623b      	str	r3, [r7, #32]
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002452:	623b      	str	r3, [r7, #32]
      break;
 8002454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002456:	6a3b      	ldr	r3, [r7, #32]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bc90      	pop	{r4, r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0800503c 	.word	0x0800503c
 8002468:	40021000 	.word	0x40021000
 800246c:	007a1200 	.word	0x007a1200
 8002470:	003d0900 	.word	0x003d0900

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b02      	ldr	r3, [pc, #8]	; (8002484 <HAL_RCC_GetHCLKFreq+0x10>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800248c:	f7ff fff2 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	0800584c 	.word	0x0800584c

080024b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCC_Delay+0x34>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <RCC_Delay+0x38>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0a5b      	lsrs	r3, r3, #9
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024cc:	bf00      	nop
  }
  while (Delay --);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	60fa      	str	r2, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <RCC_Delay+0x1c>
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000008 	.word	0x20000008
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f2:	f3ef 8305 	mrs	r3, IPSR
 80024f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80024f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002502:	607b      	str	r3, [r7, #4]
  return(result);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <osKernelInitialize+0x32>
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <osKernelInitialize+0x60>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d109      	bne.n	8002526 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002512:	f3ef 8311 	mrs	r3, BASEPRI
 8002516:	603b      	str	r3, [r7, #0]
  return(result);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800251e:	f06f 0305 	mvn.w	r3, #5
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e00c      	b.n	8002540 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <osKernelInitialize+0x60>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <osKernelInitialize+0x60>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e002      	b.n	8002540 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	200004a0 	.word	0x200004a0

08002550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002556:	f3ef 8305 	mrs	r3, IPSR
 800255a:	60bb      	str	r3, [r7, #8]
  return(result);
 800255c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002562:	f3ef 8310 	mrs	r3, PRIMASK
 8002566:	607b      	str	r3, [r7, #4]
  return(result);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <osKernelStart+0x32>
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <osKernelStart+0x64>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d109      	bne.n	800258a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002576:	f3ef 8311 	mrs	r3, BASEPRI
 800257a:	603b      	str	r3, [r7, #0]
  return(result);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002582:	f06f 0305 	mvn.w	r3, #5
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e00e      	b.n	80025a8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <osKernelStart+0x64>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <osKernelStart+0x64>)
 8002594:	2202      	movs	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002598:	f001 f878 	bl	800368c <vTaskStartScheduler>
      stat = osOK;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e002      	b.n	80025a8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200004a0 	.word	0x200004a0

080025b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b092      	sub	sp, #72	; 0x48
 80025bc:	af04      	add	r7, sp, #16
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c8:	f3ef 8305 	mrs	r3, IPSR
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 8094 	bne.w	80026fe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d6:	f3ef 8310 	mrs	r3, PRIMASK
 80025da:	623b      	str	r3, [r7, #32]
  return(result);
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 808d 	bne.w	80026fe <osThreadNew+0x146>
 80025e4:	4b48      	ldr	r3, [pc, #288]	; (8002708 <osThreadNew+0x150>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d106      	bne.n	80025fa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025ec:	f3ef 8311 	mrs	r3, BASEPRI
 80025f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 8082 	bne.w	80026fe <osThreadNew+0x146>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d07e      	beq.n	80026fe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002604:	2318      	movs	r3, #24
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002608:	2300      	movs	r3, #0
 800260a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800260c:	f107 031b 	add.w	r3, r7, #27
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d045      	beq.n	80026aa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <osThreadNew+0x74>
        name = attr->name;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <osThreadNew+0x9a>
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	2b38      	cmp	r3, #56	; 0x38
 8002644:	d805      	bhi.n	8002652 <osThreadNew+0x9a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <osThreadNew+0x9e>
        return (NULL);
 8002652:	2300      	movs	r3, #0
 8002654:	e054      	b.n	8002700 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00e      	beq.n	800268c <osThreadNew+0xd4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b5b      	cmp	r3, #91	; 0x5b
 8002674:	d90a      	bls.n	800268c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <osThreadNew+0xd4>
        mem = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	e010      	b.n	80026ae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10c      	bne.n	80026ae <osThreadNew+0xf6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d108      	bne.n	80026ae <osThreadNew+0xf6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <osThreadNew+0xf6>
          mem = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a8:	e001      	b.n	80026ae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d110      	bne.n	80026d6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026bc:	9202      	str	r2, [sp, #8]
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fe12 	bl	80032f4 <xTaskCreateStatic>
 80026d0:	4603      	mov	r3, r0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e013      	b.n	80026fe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d110      	bne.n	80026fe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fe5c 	bl	80033ac <xTaskCreate>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <osThreadNew+0x146>
          hTask = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026fe:	697b      	ldr	r3, [r7, #20]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200004a0 	.word	0x200004a0

0800270c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002714:	f3ef 8305 	mrs	r3, IPSR
 8002718:	613b      	str	r3, [r7, #16]
  return(result);
 800271a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10f      	bne.n	8002740 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002720:	f3ef 8310 	mrs	r3, PRIMASK
 8002724:	60fb      	str	r3, [r7, #12]
  return(result);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <osDelay+0x34>
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <osDelay+0x58>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d109      	bne.n	8002748 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002734:	f3ef 8311 	mrs	r3, BASEPRI
 8002738:	60bb      	str	r3, [r7, #8]
  return(result);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <osDelay+0x3c>
    stat = osErrorISR;
 8002740:	f06f 0305 	mvn.w	r3, #5
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e007      	b.n	8002758 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 ff66 	bl	8003624 <vTaskDelay>
    }
  }

  return (stat);
 8002758:	697b      	ldr	r3, [r7, #20]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200004a0 	.word	0x200004a0

08002768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <vApplicationGetIdleTaskMemory+0x28>)
 8002778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <vApplicationGetIdleTaskMemory+0x2c>)
 800277e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	200004a4 	.word	0x200004a4
 8002794:	20000500 	.word	0x20000500

08002798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80027a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <vApplicationGetTimerTaskMemory+0x30>)
 80027ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000700 	.word	0x20000700
 80027c8:	2000075c 	.word	0x2000075c

080027cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f103 0208 	add.w	r2, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0208 	add.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d103      	bne.n	8002888 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e00c      	b.n	80028a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3308      	adds	r3, #8
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e002      	b.n	8002896 <vListInsert+0x2e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d2f6      	bcs.n	8002890 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002956:	f001 ffc9 	bl	80048ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	441a      	add	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	3b01      	subs	r3, #1
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01a      	beq.n	80029ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f8f1 	bl	8003ba0 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <xQueueGenericReset+0xcc>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	e009      	b.n	80029ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3310      	adds	r3, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fef6 	bl	80027cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fef1 	bl	80027cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ea:	f001 ffaf 	bl	800494c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <xQueueGenericCreateStatic+0x52>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <xQueueGenericCreateStatic+0x56>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericCreateStatic+0x58>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	623b      	str	r3, [r7, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <xQueueGenericCreateStatic+0x7e>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <xQueueGenericCreateStatic+0x82>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <xQueueGenericCreateStatic+0x84>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	61fb      	str	r3, [r7, #28]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a9a:	2350      	movs	r3, #80	; 0x50
 8002a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d00a      	beq.n	8002aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61bb      	str	r3, [r7, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002acc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f805 	bl	8002aea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3730      	adds	r7, #48	; 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e002      	b.n	8002b0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b18:	2101      	movs	r1, #1
 8002b1a:	69b8      	ldr	r0, [r7, #24]
 8002b1c:	f7ff ff06 	bl	800292c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSend+0x32>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <xQueueGenericSend+0x40>
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueGenericSend+0x44>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueGenericSend+0x46>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <xQueueGenericSend+0x60>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <xQueueGenericSend+0x6e>
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSend+0x72>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSend+0x74>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xQueueGenericSend+0x8e>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	623b      	str	r3, [r7, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bbe:	f001 f9b1 	bl	8003f24 <xTaskGetSchedulerState>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <xQueueGenericSend+0x9e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <xQueueGenericSend+0xa2>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <xQueueGenericSend+0xa4>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <xQueueGenericSend+0xbe>
	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	61fb      	str	r3, [r7, #28]
}
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bee:	f001 fe7d 	bl	80048ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <xQueueGenericSend+0xd4>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d129      	bne.n	8002c58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0a:	f000 fa07 	bl	800301c <prvCopyDataToQueue>
 8002c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	3324      	adds	r3, #36	; 0x24
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 ffbf 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c28:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <xQueueGenericSend+0x1f8>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e00a      	b.n	8002c50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <xQueueGenericSend+0x1f8>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c50:	f001 fe7c 	bl	800494c <vPortExitCritical>
				return pdPASS;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e063      	b.n	8002d20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c5e:	f001 fe75 	bl	800494c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e05c      	b.n	8002d20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fff9 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c7a:	f001 fe67 	bl	800494c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c7e:	f000 fd6b 	bl	8003758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c82:	f001 fe33 	bl	80048ec <vPortEnterCritical>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d103      	bne.n	8002c9c <xQueueGenericSend+0x16c>
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSend+0x182>
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cb2:	f001 fe4b 	bl	800494c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cb6:	1d3a      	adds	r2, r7, #4
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 ffe8 	bl	8003c94 <xTaskCheckForTimeOut>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d124      	bne.n	8002d14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ccc:	f000 fa9e 	bl	800320c <prvIsQueueFull>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	3310      	adds	r3, #16
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 ff0e 	bl	8003b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce6:	f000 fa29 	bl	800313c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cea:	f000 fd43 	bl	8003774 <xTaskResumeAll>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f af7c 	bne.w	8002bee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <xQueueGenericSend+0x1f8>)
 8002cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	e772      	b.n	8002bee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0a:	f000 fa17 	bl	800313c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d0e:	f000 fd31 	bl	8003774 <xTaskResumeAll>
 8002d12:	e76c      	b.n	8002bee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d16:	f000 fa11 	bl	800313c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d1a:	f000 fd2b 	bl	8003774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d1e:	2300      	movs	r3, #0
		}
	}
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3738      	adds	r7, #56	; 0x38
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <xQueueGenericSendFromISR+0x3c>
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <xQueueGenericSendFromISR+0x40>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <xQueueGenericSendFromISR+0x42>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	623b      	str	r3, [r7, #32]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <xQueueGenericSendFromISR+0x6a>
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <xQueueGenericSendFromISR+0x6e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <xQueueGenericSendFromISR+0x70>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61fb      	str	r3, [r7, #28]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002db6:	f001 fe5b 	bl	8004a70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dba:	f3ef 8211 	mrs	r2, BASEPRI
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	61ba      	str	r2, [r7, #24]
 8002dd0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <xQueueGenericSendFromISR+0xbc>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d12c      	bne.n	8002e42 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df8:	f000 f910 	bl	800301c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dfc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d112      	bne.n	8002e2c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fec4 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e007      	b.n	8002e3c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	b25a      	sxtb	r2, r3
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e40:	e001      	b.n	8002e46 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <xQueueReceive+0x30>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	623b      	str	r3, [r7, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <xQueueReceive+0x3e>
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <xQueueReceive+0x42>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueReceive+0x44>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <xQueueReceive+0x5e>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	61fb      	str	r3, [r7, #28]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eba:	f001 f833 	bl	8003f24 <xTaskGetSchedulerState>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <xQueueReceive+0x6e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <xQueueReceive+0x72>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueReceive+0x74>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueReceive+0x8e>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	61bb      	str	r3, [r7, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eea:	f001 fcff 	bl	80048ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01f      	beq.n	8002f3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efe:	f000 f8f7 	bl	80030f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00f      	beq.n	8002f32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	3310      	adds	r3, #16
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fe42 	bl	8003ba0 <xTaskRemoveFromEventList>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <xQueueReceive+0x1bc>)
 8002f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f32:	f001 fd0b 	bl	800494c <vPortExitCritical>
				return pdPASS;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e069      	b.n	800300e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f40:	f001 fd04 	bl	800494c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e062      	b.n	800300e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fe88 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f5c:	f001 fcf6 	bl	800494c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f60:	f000 fbfa 	bl	8003758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f64:	f001 fcc2 	bl	80048ec <vPortEnterCritical>
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <xQueueReceive+0x122>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d103      	bne.n	8002f94 <xQueueReceive+0x138>
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f94:	f001 fcda 	bl	800494c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f98:	1d3a      	adds	r2, r7, #4
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fe77 	bl	8003c94 <xTaskCheckForTimeOut>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d123      	bne.n	8002ff4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fae:	f000 f917 	bl	80031e0 <prvIsQueueEmpty>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fd9d 	bl	8003b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc8:	f000 f8b8 	bl	800313c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fcc:	f000 fbd2 	bl	8003774 <xTaskResumeAll>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d189      	bne.n	8002eea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <xQueueReceive+0x1bc>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	e780      	b.n	8002eea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fea:	f000 f8a7 	bl	800313c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fee:	f000 fbc1 	bl	8003774 <xTaskResumeAll>
 8002ff2:	e77a      	b.n	8002eea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff6:	f000 f8a1 	bl	800313c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ffa:	f000 fbbb 	bl	8003774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003000:	f000 f8ee 	bl	80031e0 <prvIsQueueEmpty>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	f43f af6f 	beq.w	8002eea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800300e:	4618      	mov	r0, r3
 8003010:	3730      	adds	r7, #48	; 0x30
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d14d      	bne.n	80030de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 ff8a 	bl	8003f60 <xTaskPriorityDisinherit>
 800304c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	e043      	b.n	80030de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d119      	bne.n	8003090 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6898      	ldr	r0, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	461a      	mov	r2, r3
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	f001 ff56 	bl	8004f18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	441a      	add	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d32b      	bcc.n	80030de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	e026      	b.n	80030de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68d8      	ldr	r0, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	461a      	mov	r2, r3
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	f001 ff3c 	bl	8004f18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	425b      	negs	r3, r3
 80030aa:	441a      	add	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d207      	bcs.n	80030cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	425b      	negs	r3, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d105      	bne.n	80030de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3b01      	subs	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030e6:	697b      	ldr	r3, [r7, #20]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	441a      	add	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d303      	bcc.n	8003124 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68d9      	ldr	r1, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	461a      	mov	r2, r3
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	f001 fef2 	bl	8004f18 <memcpy>
	}
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003144:	f001 fbd2 	bl	80048ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003150:	e011      	b.n	8003176 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3324      	adds	r3, #36	; 0x24
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd1e 	bl	8003ba0 <xTaskRemoveFromEventList>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800316a:	f000 fdf5 	bl	8003d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3b01      	subs	r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dce9      	bgt.n	8003152 <prvUnlockQueue+0x16>
 800317e:	e000      	b.n	8003182 <prvUnlockQueue+0x46>
					break;
 8003180:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	22ff      	movs	r2, #255	; 0xff
 8003186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800318a:	f001 fbdf 	bl	800494c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800318e:	f001 fbad 	bl	80048ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003198:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800319a:	e011      	b.n	80031c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3310      	adds	r3, #16
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fcf9 	bl	8003ba0 <xTaskRemoveFromEventList>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031b4:	f000 fdd0 	bl	8003d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dce9      	bgt.n	800319c <prvUnlockQueue+0x60>
 80031c8:	e000      	b.n	80031cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031d4:	f001 fbba 	bl	800494c <vPortExitCritical>
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e8:	f001 fb80 	bl	80048ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e001      	b.n	80031fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031fe:	f001 fba5 	bl	800494c <vPortExitCritical>

	return xReturn;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003214:	f001 fb6a 	bl	80048ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	429a      	cmp	r2, r3
 8003222:	d102      	bne.n	800322a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e001      	b.n	800322e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800322e:	f001 fb8d 	bl	800494c <vPortExitCritical>

	return xReturn;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e014      	b.n	8003276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800324c:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <vQueueAddToRegistry+0x4c>)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003258:	490b      	ldr	r1, [pc, #44]	; (8003288 <vQueueAddToRegistry+0x4c>)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <vQueueAddToRegistry+0x4c>)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800326e:	e006      	b.n	800327e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b07      	cmp	r3, #7
 800327a:	d9e7      	bls.n	800324c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	20000b5c 	.word	0x20000b5c

0800328c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800329c:	f001 fb26 	bl	80048ec <vPortEnterCritical>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d103      	bne.n	80032b6 <vQueueWaitForMessageRestricted+0x2a>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d103      	bne.n	80032cc <vQueueWaitForMessageRestricted+0x40>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	f001 fb3e 	bl	800494c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fc31 	bl	8003b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff28 	bl	800313c <prvUnlockQueue>
	}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	; 0x38
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	623b      	str	r3, [r7, #32]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xTaskCreateStatic+0x46>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800333a:	235c      	movs	r3, #92	; 0x5c
 800333c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b5c      	cmp	r3, #92	; 0x5c
 8003342:	d00a      	beq.n	800335a <xTaskCreateStatic+0x66>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61bb      	str	r3, [r7, #24]
}
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01e      	beq.n	800339e <xTaskCreateStatic+0xaa>
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01b      	beq.n	800339e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003378:	2300      	movs	r3, #0
 800337a:	9303      	str	r3, [sp, #12]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	9302      	str	r3, [sp, #8]
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f850 	bl	8003436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003398:	f000 f8d4 	bl	8003544 <prvAddNewTaskToReadyList>
 800339c:	e001      	b.n	80033a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033a2:	697b      	ldr	r3, [r7, #20]
	}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af04      	add	r7, sp, #16
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fb93 	bl	8004aec <pvPortMalloc>
 80033c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033ce:	205c      	movs	r0, #92	; 0x5c
 80033d0:	f001 fb8c 	bl	8004aec <pvPortMalloc>
 80033d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
 80033e2:	e005      	b.n	80033f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f001 fc45 	bl	8004c74 <vPortFree>
 80033ea:	e001      	b.n	80033f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	2300      	movs	r3, #0
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	9302      	str	r3, [sp, #8]
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f80e 	bl	8003436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800341a:	69f8      	ldr	r0, [r7, #28]
 800341c:	f000 f892 	bl	8003544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003420:	2301      	movs	r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e002      	b.n	800342c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800342c:	69bb      	ldr	r3, [r7, #24]
	}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b088      	sub	sp, #32
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	461a      	mov	r2, r3
 800344e:	21a5      	movs	r1, #165	; 0xa5
 8003450:	f001 fd70 	bl	8004f34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800345e:	3b01      	subs	r3, #1
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f023 0307 	bic.w	r3, r3, #7
 800346c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	617b      	str	r3, [r7, #20]
}
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e012      	b.n	80034ba <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	7819      	ldrb	r1, [r3, #0]
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	3334      	adds	r3, #52	; 0x34
 80034a4:	460a      	mov	r2, r1
 80034a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d9e9      	bls.n	8003494 <prvInitialiseNewTask+0x5e>
 80034c0:	e000      	b.n	80034c4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80034c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	2b37      	cmp	r3, #55	; 0x37
 80034d0:	d901      	bls.n	80034d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034d2:	2337      	movs	r3, #55	; 0x37
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	2200      	movs	r2, #0
 80034e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f98c 	bl	800280a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	3318      	adds	r3, #24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f987 	bl	800280a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003500:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	2200      	movs	r2, #0
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	69b8      	ldr	r0, [r7, #24]
 8003526:	f001 f8ef 	bl	8004708 <pxPortInitialiseStack>
 800352a:	4602      	mov	r2, r0
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800353c:	bf00      	nop
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800354c:	f001 f9ce 	bl	80048ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <prvAddNewTaskToReadyList+0xc4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <prvAddNewTaskToReadyList+0xc4>)
 8003558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <prvAddNewTaskToReadyList+0xc4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d110      	bne.n	8003592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003570:	f000 fc16 	bl	8003da0 <prvInitialiseTaskLists>
 8003574:	e00d      	b.n	8003592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <prvAddNewTaskToReadyList+0xcc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d802      	bhi.n	8003592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <prvAddNewTaskToReadyList+0xd0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <prvAddNewTaskToReadyList+0xd0>)
 800359a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <prvAddNewTaskToReadyList+0xd0>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <prvAddNewTaskToReadyList+0xd4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d903      	bls.n	80035b8 <prvAddNewTaskToReadyList+0x74>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <prvAddNewTaskToReadyList+0xd4>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4a15      	ldr	r2, [pc, #84]	; (800361c <prvAddNewTaskToReadyList+0xd8>)
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7ff f927 	bl	8002822 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035d4:	f001 f9ba 	bl	800494c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <prvAddNewTaskToReadyList+0xcc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d207      	bcs.n	80035fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <prvAddNewTaskToReadyList+0xdc>)
 80035f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001070 	.word	0x20001070
 800360c:	20000b9c 	.word	0x20000b9c
 8003610:	2000107c 	.word	0x2000107c
 8003614:	2000108c 	.word	0x2000108c
 8003618:	20001078 	.word	0x20001078
 800361c:	20000ba0 	.word	0x20000ba0
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <vTaskDelay+0x60>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <vTaskDelay+0x30>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	60bb      	str	r3, [r7, #8]
}
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003654:	f000 f880 	bl	8003758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003658:	2100      	movs	r1, #0
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fcee 	bl	800403c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003660:	f000 f888 	bl	8003774 <xTaskResumeAll>
 8003664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <vTaskDelay+0x64>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20001098 	.word	0x20001098
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800369a:	463a      	mov	r2, r7
 800369c:	1d39      	adds	r1, r7, #4
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f860 	bl	8002768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	9202      	str	r2, [sp, #8]
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	460a      	mov	r2, r1
 80036ba:	4921      	ldr	r1, [pc, #132]	; (8003740 <vTaskStartScheduler+0xb4>)
 80036bc:	4821      	ldr	r0, [pc, #132]	; (8003744 <vTaskStartScheduler+0xb8>)
 80036be:	f7ff fe19 	bl	80032f4 <xTaskCreateStatic>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <vTaskStartScheduler+0xbc>)
 80036c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <vTaskStartScheduler+0xbc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e001      	b.n	80036da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036e0:	f000 fd00 	bl	80040e4 <xTimerCreateTimerTask>
 80036e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d116      	bne.n	800371a <vTaskStartScheduler+0x8e>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	613b      	str	r3, [r7, #16]
}
 80036fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <vTaskStartScheduler+0xc0>)
 8003702:	f04f 32ff 	mov.w	r2, #4294967295
 8003706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <vTaskStartScheduler+0xc4>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <vTaskStartScheduler+0xc8>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003714:	f001 f878 	bl	8004808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003718:	e00e      	b.n	8003738 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d10a      	bne.n	8003738 <vTaskStartScheduler+0xac>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	60fb      	str	r3, [r7, #12]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <vTaskStartScheduler+0xaa>
}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	0800504c 	.word	0x0800504c
 8003744:	08003d71 	.word	0x08003d71
 8003748:	20001094 	.word	0x20001094
 800374c:	20001090 	.word	0x20001090
 8003750:	2000107c 	.word	0x2000107c
 8003754:	20001074 	.word	0x20001074

08003758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <vTaskSuspendAll+0x18>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	4a03      	ldr	r2, [pc, #12]	; (8003770 <vTaskSuspendAll+0x18>)
 8003764:	6013      	str	r3, [r2, #0]
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20001098 	.word	0x20001098

08003774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003782:	4b42      	ldr	r3, [pc, #264]	; (800388c <xTaskResumeAll+0x118>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	603b      	str	r3, [r7, #0]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037a0:	f001 f8a4 	bl	80048ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <xTaskResumeAll+0x118>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	4a38      	ldr	r2, [pc, #224]	; (800388c <xTaskResumeAll+0x118>)
 80037ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <xTaskResumeAll+0x118>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d162      	bne.n	800387c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <xTaskResumeAll+0x11c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05e      	beq.n	800387c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037be:	e02f      	b.n	8003820 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <xTaskResumeAll+0x120>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3318      	adds	r3, #24
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f883 	bl	80028d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f87e 	bl	80028d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <xTaskResumeAll+0x124>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d903      	bls.n	80037f0 <xTaskResumeAll+0x7c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <xTaskResumeAll+0x124>)
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4a27      	ldr	r2, [pc, #156]	; (800389c <xTaskResumeAll+0x128>)
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f7ff f80b 	bl	8002822 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <xTaskResumeAll+0x12c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <xTaskResumeAll+0x130>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <xTaskResumeAll+0x120>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1cb      	bne.n	80037c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800382e:	f000 fb55 	bl	8003edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <xTaskResumeAll+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800383e:	f000 f845 	bl	80038cc <xTaskIncrementTick>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <xTaskResumeAll+0x130>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3b01      	subs	r3, #1
 8003852:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f1      	bne.n	800383e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <xTaskResumeAll+0x134>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <xTaskResumeAll+0x130>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <xTaskResumeAll+0x138>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800387c:	f001 f866 	bl	800494c <vPortExitCritical>

	return xAlreadyYielded;
 8003880:	68bb      	ldr	r3, [r7, #8]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20001098 	.word	0x20001098
 8003890:	20001070 	.word	0x20001070
 8003894:	20001030 	.word	0x20001030
 8003898:	20001078 	.word	0x20001078
 800389c:	20000ba0 	.word	0x20000ba0
 80038a0:	20000b9c 	.word	0x20000b9c
 80038a4:	20001084 	.word	0x20001084
 80038a8:	20001080 	.word	0x20001080
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <xTaskGetTickCount+0x18>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	20001074 	.word	0x20001074

080038cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <xTaskIncrementTick+0x150>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 808e 	bne.w	80039fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <xTaskIncrementTick+0x154>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038e8:	4a4d      	ldr	r2, [pc, #308]	; (8003a20 <xTaskIncrementTick+0x154>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <xTaskIncrementTick+0x158>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <xTaskIncrementTick+0x48>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	603b      	str	r3, [r7, #0]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <xTaskIncrementTick+0x46>
 8003914:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <xTaskIncrementTick+0x15c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a41      	ldr	r2, [pc, #260]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <xTaskIncrementTick+0x15c>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <xTaskIncrementTick+0x160>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a3f      	ldr	r2, [pc, #252]	; (8003a2c <xTaskIncrementTick+0x160>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	f000 fad3 	bl	8003edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003936:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d34e      	bcc.n	80039de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <xTaskIncrementTick+0x82>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xTaskIncrementTick+0x84>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003956:	f04f 32ff 	mov.w	r2, #4294967295
 800395a:	601a      	str	r2, [r3, #0]
					break;
 800395c:	e03f      	b.n	80039de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d203      	bcs.n	800397e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003976:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6013      	str	r3, [r2, #0]
						break;
 800397c:	e02f      	b.n	80039de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3304      	adds	r3, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ffa8 	bl	80028d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3318      	adds	r3, #24
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe ff9f 	bl	80028d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <xTaskIncrementTick+0x168>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d903      	bls.n	80039ae <xTaskIncrementTick+0xe2>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <xTaskIncrementTick+0x168>)
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <xTaskIncrementTick+0x16c>)
 80039bc:	441a      	add	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe ff2c 	bl	8002822 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <xTaskIncrementTick+0x170>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3b3      	bcc.n	8003940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039dc:	e7b0      	b.n	8003940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <xTaskIncrementTick+0x170>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4914      	ldr	r1, [pc, #80]	; (8003a38 <xTaskIncrementTick+0x16c>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d907      	bls.n	8003a06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e004      	b.n	8003a06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <xTaskIncrementTick+0x174>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <xTaskIncrementTick+0x174>)
 8003a04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <xTaskIncrementTick+0x178>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a12:	697b      	ldr	r3, [r7, #20]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20001098 	.word	0x20001098
 8003a20:	20001074 	.word	0x20001074
 8003a24:	20001028 	.word	0x20001028
 8003a28:	2000102c 	.word	0x2000102c
 8003a2c:	20001088 	.word	0x20001088
 8003a30:	20001090 	.word	0x20001090
 8003a34:	20001078 	.word	0x20001078
 8003a38:	20000ba0 	.word	0x20000ba0
 8003a3c:	20000b9c 	.word	0x20000b9c
 8003a40:	20001080 	.word	0x20001080
 8003a44:	20001084 	.word	0x20001084

08003a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <vTaskSwitchContext+0xa4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <vTaskSwitchContext+0xa8>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a5c:	e041      	b.n	8003ae2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <vTaskSwitchContext+0xa8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <vTaskSwitchContext+0xac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e010      	b.n	8003a8e <vTaskSwitchContext+0x46>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vTaskSwitchContext+0x3e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	491a      	ldr	r1, [pc, #104]	; (8003af8 <vTaskSwitchContext+0xb0>)
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0e4      	beq.n	8003a6c <vTaskSwitchContext+0x24>
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <vTaskSwitchContext+0xb0>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d104      	bne.n	8003ad2 <vTaskSwitchContext+0x8a>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <vTaskSwitchContext+0xb4>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <vTaskSwitchContext+0xac>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6013      	str	r3, [r2, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20001098 	.word	0x20001098
 8003af0:	20001084 	.word	0x20001084
 8003af4:	20001078 	.word	0x20001078
 8003af8:	20000ba0 	.word	0x20000ba0
 8003afc:	20000b9c 	.word	0x20000b9c

08003b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <vTaskPlaceOnEventList+0x44>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fe9a 	bl	8002868 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b34:	2101      	movs	r1, #1
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 fa80 	bl	800403c <prvAddCurrentTaskToDelayedList>
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000b9c 	.word	0x20000b9c

08003b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	617b      	str	r3, [r7, #20]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <vTaskPlaceOnEventListRestricted+0x54>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3318      	adds	r3, #24
 8003b76:	4619      	mov	r1, r3
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7fe fe52 	bl	8002822 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f000 fa55 	bl	800403c <prvAddCurrentTaskToDelayedList>
	}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000b9c 	.word	0x20000b9c

08003ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60fb      	str	r3, [r7, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fe81 	bl	80028d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <xTaskRemoveFromEventList+0xb0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11d      	bne.n	8003c1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fe78 	bl	80028d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <xTaskRemoveFromEventList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <xTaskRemoveFromEventList+0x5c>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <xTaskRemoveFromEventList+0xb4>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <xTaskRemoveFromEventList+0xb8>)
 8003c0a:	441a      	add	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fe fe05 	bl	8002822 <vListInsertEnd>
 8003c18:	e005      	b.n	8003c26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3318      	adds	r3, #24
 8003c1e:	4619      	mov	r1, r3
 8003c20:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xTaskRemoveFromEventList+0xbc>)
 8003c22:	f7fe fdfe 	bl	8002822 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <xTaskRemoveFromEventList+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d905      	bls.n	8003c40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <xTaskRemoveFromEventList+0xc4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e001      	b.n	8003c44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c44:	697b      	ldr	r3, [r7, #20]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20001098 	.word	0x20001098
 8003c54:	20001078 	.word	0x20001078
 8003c58:	20000ba0 	.word	0x20000ba0
 8003c5c:	20001030 	.word	0x20001030
 8003c60:	20000b9c 	.word	0x20000b9c
 8003c64:	20001084 	.word	0x20001084

08003c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vTaskInternalSetTimeOutState+0x24>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <vTaskInternalSetTimeOutState+0x28>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20001088 	.word	0x20001088
 8003c90:	20001074 	.word	0x20001074

08003c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cd6:	f000 fe09 	bl	80048ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <xTaskCheckForTimeOut+0xbc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e023      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <xTaskCheckForTimeOut+0xc0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d007      	beq.n	8003d16 <xTaskCheckForTimeOut+0x82>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e015      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d20b      	bcs.n	8003d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff9b 	bl	8003c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e004      	b.n	8003d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f000 fe03 	bl	800494c <vPortExitCritical>

	return xReturn;
 8003d46:	69fb      	ldr	r3, [r7, #28]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20001074 	.word	0x20001074
 8003d54:	20001088 	.word	0x20001088

08003d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <vTaskMissedYield+0x14>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20001084 	.word	0x20001084

08003d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d78:	f000 f852 	bl	8003e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <prvIdleTask+0x28>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d9f9      	bls.n	8003d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <prvIdleTask+0x2c>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d94:	e7f0      	b.n	8003d78 <prvIdleTask+0x8>
 8003d96:	bf00      	nop
 8003d98:	20000ba0 	.word	0x20000ba0
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e00c      	b.n	8003dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <prvInitialiseTaskLists+0x60>)
 8003db8:	4413      	add	r3, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fd06 	bl	80027cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b37      	cmp	r3, #55	; 0x37
 8003dca:	d9ef      	bls.n	8003dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dcc:	480d      	ldr	r0, [pc, #52]	; (8003e04 <prvInitialiseTaskLists+0x64>)
 8003dce:	f7fe fcfd 	bl	80027cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dd2:	480d      	ldr	r0, [pc, #52]	; (8003e08 <prvInitialiseTaskLists+0x68>)
 8003dd4:	f7fe fcfa 	bl	80027cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <prvInitialiseTaskLists+0x6c>)
 8003dda:	f7fe fcf7 	bl	80027cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dde:	480c      	ldr	r0, [pc, #48]	; (8003e10 <prvInitialiseTaskLists+0x70>)
 8003de0:	f7fe fcf4 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <prvInitialiseTaskLists+0x74>)
 8003de6:	f7fe fcf1 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <prvInitialiseTaskLists+0x78>)
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <prvInitialiseTaskLists+0x64>)
 8003dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvInitialiseTaskLists+0x7c>)
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <prvInitialiseTaskLists+0x68>)
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000ba0 	.word	0x20000ba0
 8003e04:	20001000 	.word	0x20001000
 8003e08:	20001014 	.word	0x20001014
 8003e0c:	20001030 	.word	0x20001030
 8003e10:	20001044 	.word	0x20001044
 8003e14:	2000105c 	.word	0x2000105c
 8003e18:	20001028 	.word	0x20001028
 8003e1c:	2000102c 	.word	0x2000102c

08003e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e26:	e019      	b.n	8003e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e28:	f000 fd60 	bl	80048ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <prvCheckTasksWaitingTermination+0x50>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fd4d 	bl	80028d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <prvCheckTasksWaitingTermination+0x54>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <prvCheckTasksWaitingTermination+0x54>)
 8003e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e52:	f000 fd7b 	bl	800494c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f810 	bl	8003e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <prvCheckTasksWaitingTermination+0x58>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e1      	bne.n	8003e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20001044 	.word	0x20001044
 8003e74:	20001070 	.word	0x20001070
 8003e78:	20001058 	.word	0x20001058

08003e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 feee 	bl	8004c74 <vPortFree>
				vPortFree( pxTCB );
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 feeb 	bl	8004c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e9e:	e018      	b.n	8003ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d103      	bne.n	8003eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fee2 	bl	8004c74 <vPortFree>
	}
 8003eb0:	e00f      	b.n	8003ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d00a      	beq.n	8003ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	60fb      	str	r3, [r7, #12]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <prvDeleteTCB+0x54>
	}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <prvResetNextTaskUnblockTime+0x40>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <prvResetNextTaskUnblockTime+0x14>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <prvResetNextTaskUnblockTime+0x16>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvResetNextTaskUnblockTime+0x44>)
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003efe:	e008      	b.n	8003f12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <prvResetNextTaskUnblockTime+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <prvResetNextTaskUnblockTime+0x44>)
 8003f10:	6013      	str	r3, [r2, #0]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	20001028 	.word	0x20001028
 8003f20:	20001090 	.word	0x20001090

08003f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <xTaskGetSchedulerState+0x34>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f32:	2301      	movs	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	e008      	b.n	8003f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <xTaskGetSchedulerState+0x38>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f40:	2302      	movs	r3, #2
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	e001      	b.n	8003f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f4a:	687b      	ldr	r3, [r7, #4]
	}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	2000107c 	.word	0x2000107c
 8003f5c:	20001098 	.word	0x20001098

08003f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d056      	beq.n	8004024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <xTaskPriorityDisinherit+0xd0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d00a      	beq.n	8003f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	60fb      	str	r3, [r7, #12]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60bb      	str	r3, [r7, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	1e5a      	subs	r2, r3, #1
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d02c      	beq.n	8004024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d128      	bne.n	8004024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fc7e 	bl	80028d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <xTaskPriorityDisinherit+0xd4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d903      	bls.n	8004004 <xTaskPriorityDisinherit+0xa4>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <xTaskPriorityDisinherit+0xd4>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <xTaskPriorityDisinherit+0xd8>)
 8004012:	441a      	add	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7fe fc01 	bl	8002822 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004024:	697b      	ldr	r3, [r7, #20]
	}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000b9c 	.word	0x20000b9c
 8004034:	20001078 	.word	0x20001078
 8004038:	20000ba0 	.word	0x20000ba0

0800403c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3304      	adds	r3, #4
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fc40 	bl	80028d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d10a      	bne.n	8004076 <prvAddCurrentTaskToDelayedList+0x3a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4819      	ldr	r0, [pc, #100]	; (80040d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004070:	f7fe fbd7 	bl	8002822 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004074:	e026      	b.n	80040c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	429a      	cmp	r2, r3
 800408c:	d209      	bcs.n	80040a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fe fbe4 	bl	8002868 <vListInsert>
}
 80040a0:	e010      	b.n	80040c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fe fbda 	bl	8002868 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d202      	bcs.n	80040c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20001074 	.word	0x20001074
 80040d0:	20000b9c 	.word	0x20000b9c
 80040d4:	2000105c 	.word	0x2000105c
 80040d8:	2000102c 	.word	0x2000102c
 80040dc:	20001028 	.word	0x20001028
 80040e0:	20001090 	.word	0x20001090

080040e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040ee:	f000 facb 	bl	8004688 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <xTimerCreateTimerTask+0x80>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d021      	beq.n	800413e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004102:	1d3a      	adds	r2, r7, #4
 8004104:	f107 0108 	add.w	r1, r7, #8
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe fb43 	bl	8002798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	9202      	str	r2, [sp, #8]
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	2302      	movs	r3, #2
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	460a      	mov	r2, r1
 8004124:	4910      	ldr	r1, [pc, #64]	; (8004168 <xTimerCreateTimerTask+0x84>)
 8004126:	4811      	ldr	r0, [pc, #68]	; (800416c <xTimerCreateTimerTask+0x88>)
 8004128:	f7ff f8e4 	bl	80032f4 <xTaskCreateStatic>
 800412c:	4603      	mov	r3, r0
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <xTimerCreateTimerTask+0x8c>)
 8004130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <xTimerCreateTimerTask+0x8c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	613b      	str	r3, [r7, #16]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200010cc 	.word	0x200010cc
 8004168:	08005054 	.word	0x08005054
 800416c:	08004291 	.word	0x08004291
 8004170:	200010d0 	.word	0x200010d0

08004174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <xTimerGenericCommand+0x98>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02a      	beq.n	8004200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	dc18      	bgt.n	80041ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041bc:	f7ff feb2 	bl	8003f24 <xTaskGetSchedulerState>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d109      	bne.n	80041da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <xTimerGenericCommand+0x98>)
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	f107 0110 	add.w	r1, r7, #16
 80041ce:	2300      	movs	r3, #0
 80041d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d2:	f7fe fcad 	bl	8002b30 <xQueueGenericSend>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24
 80041d8:	e012      	b.n	8004200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <xTimerGenericCommand+0x98>)
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f107 0110 	add.w	r1, r7, #16
 80041e2:	2300      	movs	r3, #0
 80041e4:	2200      	movs	r2, #0
 80041e6:	f7fe fca3 	bl	8002b30 <xQueueGenericSend>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24
 80041ec:	e008      	b.n	8004200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <xTimerGenericCommand+0x98>)
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f107 0110 	add.w	r1, r7, #16
 80041f6:	2300      	movs	r3, #0
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	f7fe fd97 	bl	8002d2c <xQueueGenericSendFromISR>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004202:	4618      	mov	r0, r3
 8004204:	3728      	adds	r7, #40	; 0x28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200010cc 	.word	0x200010cc

08004210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <prvProcessExpiredTimer+0x7c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe fb55 	bl	80028d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d122      	bne.n	800427c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f000 f8c8 	bl	80043d8 <prvInsertTimerInActiveList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	2100      	movs	r1, #0
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f7ff ff8b 	bl	8004174 <xTimerGenericCommand>
 800425e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60fb      	str	r3, [r7, #12]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	4798      	blx	r3
}
 8004284:	bf00      	nop
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200010c4 	.word	0x200010c4

08004290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004298:	f107 0308 	add.w	r3, r7, #8
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f857 	bl	8004350 <prvGetNextExpireTime>
 80042a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4619      	mov	r1, r3
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f803 	bl	80042b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042ae:	f000 f8d5 	bl	800445c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042b2:	e7f1      	b.n	8004298 <prvTimerTask+0x8>

080042b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042be:	f7ff fa4b 	bl	8003758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f866 	bl	8004398 <prvSampleTimeNow>
 80042cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d130      	bne.n	8004336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <prvProcessTimerOrBlockTask+0x3c>
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d806      	bhi.n	80042f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042e2:	f7ff fa47 	bl	8003774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff91 	bl	8004210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042ee:	e024      	b.n	800433a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <prvProcessTimerOrBlockTask+0x90>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <prvProcessTimerOrBlockTask+0x94>)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	f7fe ffb9 	bl	800328c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800431a:	f7ff fa2b 	bl	8003774 <xTaskResumeAll>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <prvProcessTimerOrBlockTask+0x98>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
}
 8004334:	e001      	b.n	800433a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004336:	f7ff fa1d 	bl	8003774 <xTaskResumeAll>
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200010c8 	.word	0x200010c8
 8004348:	200010cc 	.word	0x200010cc
 800434c:	e000ed04 	.word	0xe000ed04

08004350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <prvGetNextExpireTime+0x44>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <prvGetNextExpireTime+0x44>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e001      	b.n	8004386 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200010c4 	.word	0x200010c4

08004398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043a0:	f7ff fa86 	bl	80038b0 <xTaskGetTickCount>
 80043a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <prvSampleTimeNow+0x3c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d205      	bcs.n	80043bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043b0:	f000 f908 	bl	80045c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e002      	b.n	80043c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043c2:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <prvSampleTimeNow+0x3c>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200010d4 	.word	0x200010d4

080043d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d812      	bhi.n	8004424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e01b      	b.n	800444a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <prvInsertTimerInActiveList+0x7c>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7fe fa23 	bl	8002868 <vListInsert>
 8004422:	e012      	b.n	800444a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d206      	bcs.n	800443a <prvInsertTimerInActiveList+0x62>
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e007      	b.n	800444a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <prvInsertTimerInActiveList+0x80>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7fe fa0f 	bl	8002868 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200010c8 	.word	0x200010c8
 8004458:	200010c4 	.word	0x200010c4

0800445c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004462:	e09d      	b.n	80045a0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da18      	bge.n	800449c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	3304      	adds	r3, #4
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	61fb      	str	r3, [r7, #28]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004492:	6850      	ldr	r0, [r2, #4]
 8004494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	4611      	mov	r1, r2
 800449a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db7d      	blt.n	800459e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fa10 	bl	80028d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044b8:	463b      	mov	r3, r7
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff6c 	bl	8004398 <prvSampleTimeNow>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d86b      	bhi.n	80045a0 <prvProcessReceivedCommands+0x144>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <prvProcessReceivedCommands+0x74>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	080045a1 	.word	0x080045a1
 80044e0:	08004555 	.word	0x08004555
 80044e4:	0800458d 	.word	0x0800458d
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	080044f9 	.word	0x080044f9
 80044f0:	080045a1 	.word	0x080045a1
 80044f4:	08004555 	.word	0x08004555
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	18d1      	adds	r1, r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f7ff ff67 	bl	80043d8 <prvInsertTimerInActiveList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d047      	beq.n	80045a0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004516:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d13f      	bne.n	80045a0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	441a      	add	r2, r3
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	2100      	movs	r1, #0
 8004530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004532:	f7ff fe1f 	bl	8004174 <xTimerGenericCommand>
 8004536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d130      	bne.n	80045a0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61bb      	str	r3, [r7, #24]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	617b      	str	r3, [r7, #20]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	18d1      	adds	r1, r2, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004586:	f7ff ff27 	bl	80043d8 <prvInsertTimerInActiveList>
					break;
 800458a:	e009      	b.n	80045a0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004598:	f000 fb6c 	bl	8004c74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800459c:	e000      	b.n	80045a0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800459e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <prvProcessReceivedCommands+0x164>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1d39      	adds	r1, r7, #4
 80045a6:	2200      	movs	r2, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fc57 	bl	8002e5c <xQueueReceive>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af57 	bne.w	8004464 <prvProcessReceivedCommands+0x8>
	}
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	3730      	adds	r7, #48	; 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	200010cc 	.word	0x200010cc

080045c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ca:	e045      	b.n	8004658 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045cc:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <prvSwitchTimerLists+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <prvSwitchTimerLists+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe f977 	bl	80028d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d12e      	bne.n	8004658 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	429a      	cmp	r2, r3
 800460a:	d90e      	bls.n	800462a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <prvSwitchTimerLists+0xbc>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7fe f920 	bl	8002868 <vListInsert>
 8004628:	e016      	b.n	8004658 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800462a:	2300      	movs	r3, #0
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2300      	movs	r3, #0
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	2100      	movs	r1, #0
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fd9d 	bl	8004174 <xTimerGenericCommand>
 800463a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	603b      	str	r3, [r7, #0]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <prvSwitchTimerLists+0xbc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1b4      	bne.n	80045cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <prvSwitchTimerLists+0xbc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <prvSwitchTimerLists+0xc0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <prvSwitchTimerLists+0xbc>)
 800466e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004670:	4a04      	ldr	r2, [pc, #16]	; (8004684 <prvSwitchTimerLists+0xc0>)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6013      	str	r3, [r2, #0]
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200010c4 	.word	0x200010c4
 8004684:	200010c8 	.word	0x200010c8

08004688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800468e:	f000 f92d 	bl	80048ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d120      	bne.n	80046dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800469a:	4814      	ldr	r0, [pc, #80]	; (80046ec <prvCheckForValidListAndQueue+0x64>)
 800469c:	f7fe f896 	bl	80027cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046a0:	4813      	ldr	r0, [pc, #76]	; (80046f0 <prvCheckForValidListAndQueue+0x68>)
 80046a2:	f7fe f893 	bl	80027cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <prvCheckForValidListAndQueue+0x6c>)
 80046a8:	4a10      	ldr	r2, [pc, #64]	; (80046ec <prvCheckForValidListAndQueue+0x64>)
 80046aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <prvCheckForValidListAndQueue+0x70>)
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <prvCheckForValidListAndQueue+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046b2:	2300      	movs	r3, #0
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <prvCheckForValidListAndQueue+0x74>)
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <prvCheckForValidListAndQueue+0x78>)
 80046ba:	2110      	movs	r1, #16
 80046bc:	200a      	movs	r0, #10
 80046be:	f7fe f99d 	bl	80029fc <xQueueGenericCreateStatic>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	490b      	ldr	r1, [pc, #44]	; (8004704 <prvCheckForValidListAndQueue+0x7c>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fdb0 	bl	800323c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046dc:	f000 f936 	bl	800494c <vPortExitCritical>
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200010cc 	.word	0x200010cc
 80046ec:	2000109c 	.word	0x2000109c
 80046f0:	200010b0 	.word	0x200010b0
 80046f4:	200010c4 	.word	0x200010c4
 80046f8:	200010c8 	.word	0x200010c8
 80046fc:	20001178 	.word	0x20001178
 8004700:	200010d8 	.word	0x200010d8
 8004704:	0800505c 	.word	0x0800505c

08004708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b04      	subs	r3, #4
 8004718:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b04      	subs	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <pxPortInitialiseStack+0x54>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b14      	subs	r3, #20
 8004742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b20      	subs	r3, #32
 800474e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004750:	68fb      	ldr	r3, [r7, #12]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	08004761 	.word	0x08004761

08004760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <prvTaskExitError+0x54>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d00a      	beq.n	800478a <prvTaskExitError+0x2a>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60fb      	str	r3, [r7, #12]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <prvTaskExitError+0x28>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800479e:	bf00      	nop
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0fc      	beq.n	80047a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000014 	.word	0x20000014
	...

080047c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <pxCurrentTCBConst2>)
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047ca:	f380 8809 	msr	PSP, r0
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8811 	msr	BASEPRI, r0
 80047da:	f04e 0e0d 	orr.w	lr, lr, #13
 80047de:	4770      	bx	lr

080047e0 <pxCurrentTCBConst2>:
 80047e0:	20000b9c 	.word	0x20000b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047e8:	4806      	ldr	r0, [pc, #24]	; (8004804 <prvPortStartFirstTask+0x1c>)
 80047ea:	6800      	ldr	r0, [r0, #0]
 80047ec:	6800      	ldr	r0, [r0, #0]
 80047ee:	f380 8808 	msr	MSP, r0
 80047f2:	b662      	cpsie	i
 80047f4:	b661      	cpsie	f
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	df00      	svc	0
 8004800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004802:	bf00      	nop
 8004804:	e000ed08 	.word	0xe000ed08

08004808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <xPortStartScheduler+0xd0>)
 8004810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	22ff      	movs	r2, #255	; 0xff
 800481e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <xPortStartScheduler+0xd4>)
 8004834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800483c:	e009      	b.n	8004852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d0ef      	beq.n	800483e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	d00a      	beq.n	8004880 <xPortStartScheduler+0x78>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	60bb      	str	r3, [r7, #8]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <xPortStartScheduler+0xd8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004892:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <xPortStartScheduler+0xd8>)
 8004894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <xPortStartScheduler+0xdc>)
 80048b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048b6:	f000 f8b9 	bl	8004a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <xPortStartScheduler+0xe0>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c0:	f7ff ff92 	bl	80047e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048c4:	f7ff f8c0 	bl	8003a48 <vTaskSwitchContext>
	prvTaskExitError();
 80048c8:	f7ff ff4a 	bl	8004760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e400 	.word	0xe000e400
 80048dc:	200011c8 	.word	0x200011c8
 80048e0:	200011cc 	.word	0x200011cc
 80048e4:	e000ed20 	.word	0xe000ed20
 80048e8:	20000014 	.word	0x20000014

080048ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <vPortEnterCritical+0x58>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <vPortEnterCritical+0x58>)
 800490e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <vPortEnterCritical+0x58>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10f      	bne.n	8004938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <vPortEnterCritical+0x5c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <vPortEnterCritical+0x4c>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	603b      	str	r3, [r7, #0]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <vPortEnterCritical+0x4a>
	}
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000014 	.word	0x20000014
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <vPortExitCritical+0x4c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <vPortExitCritical+0x24>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <vPortExitCritical+0x4c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	4a08      	ldr	r2, [pc, #32]	; (8004998 <vPortExitCritical+0x4c>)
 8004978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <vPortExitCritical+0x4c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <vPortExitCritical+0x42>
 8004982:	2300      	movs	r3, #0
 8004984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f383 8811 	msr	BASEPRI, r3
}
 800498c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	20000014 	.word	0x20000014
 800499c:	00000000 	.word	0x00000000

080049a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049a0:	f3ef 8009 	mrs	r0, PSP
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <pxCurrentTCBConst>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049b0:	6010      	str	r0, [r2, #0]
 80049b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049ba:	f380 8811 	msr	BASEPRI, r0
 80049be:	f7ff f843 	bl	8003a48 <vTaskSwitchContext>
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049d6:	f380 8809 	msr	PSP, r0
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	4770      	bx	lr

080049e0 <pxCurrentTCBConst>:
 80049e0:	20000b9c 	.word	0x20000b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a02:	f7fe ff63 	bl	80038cc <xTaskIncrementTick>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <xPortSysTickHandler+0x40>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vPortSetupTimerInterrupt+0x30>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <vPortSetupTimerInterrupt+0x38>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <vPortSetupTimerInterrupt+0x3c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <vPortSetupTimerInterrupt+0x40>)
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a4e:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <vPortSetupTimerInterrupt+0x30>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e010 	.word	0xe000e010
 8004a60:	e000e018 	.word	0xe000e018
 8004a64:	20000008 	.word	0x20000008
 8004a68:	10624dd3 	.word	0x10624dd3
 8004a6c:	e000e014 	.word	0xe000e014

08004a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a76:	f3ef 8305 	mrs	r3, IPSR
 8004a7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d914      	bls.n	8004aac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <vPortValidateInterruptPriority+0x6c>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <vPortValidateInterruptPriority+0x70>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	7afa      	ldrb	r2, [r7, #11]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d20a      	bcs.n	8004aac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <vPortValidateInterruptPriority+0x74>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <vPortValidateInterruptPriority+0x78>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d90a      	bls.n	8004ad2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	603b      	str	r3, [r7, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <vPortValidateInterruptPriority+0x60>
	}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	e000e3f0 	.word	0xe000e3f0
 8004ae0:	200011c8 	.word	0x200011c8
 8004ae4:	e000ed0c 	.word	0xe000ed0c
 8004ae8:	200011cc 	.word	0x200011cc

08004aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af8:	f7fe fe2e 	bl	8003758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004afc:	4b58      	ldr	r3, [pc, #352]	; (8004c60 <pvPortMalloc+0x174>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b04:	f000 f910 	bl	8004d28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b08:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <pvPortMalloc+0x178>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 808e 	bne.w	8004c32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01d      	beq.n	8004b58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <pvPortMalloc+0x6c>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d069      	beq.n	8004c32 <pvPortMalloc+0x146>
 8004b5e:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <pvPortMalloc+0x17c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d864      	bhi.n	8004c32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b68:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <pvPortMalloc+0x180>)
 8004b6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b72:	e004      	b.n	8004b7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d903      	bls.n	8004b90 <pvPortMalloc+0xa4>
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f1      	bne.n	8004b74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b90:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <pvPortMalloc+0x174>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d04b      	beq.n	8004c32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d91f      	bls.n	8004bfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <pvPortMalloc+0xf8>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	613b      	str	r3, [r7, #16]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f000 f8f8 	bl	8004dec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <pvPortMalloc+0x17c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <pvPortMalloc+0x184>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <pvPortMalloc+0x17c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <pvPortMalloc+0x184>)
 8004c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <pvPortMalloc+0x178>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c32:	f7fe fd9f 	bl	8003774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <pvPortMalloc+0x16a>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <pvPortMalloc+0x168>
	return pvReturn;
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20001dd8 	.word	0x20001dd8
 8004c64:	20001de4 	.word	0x20001de4
 8004c68:	20001ddc 	.word	0x20001ddc
 8004c6c:	20001dd0 	.word	0x20001dd0
 8004c70:	20001de0 	.word	0x20001de0

08004c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d048      	beq.n	8004d18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c86:	2308      	movs	r3, #8
 8004c88:	425b      	negs	r3, r3
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <vPortFree+0xac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <vPortFree+0x44>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <vPortFree+0x62>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60bb      	str	r3, [r7, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <vPortFree+0xac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortFree+0xac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cfc:	f7fe fd2c 	bl	8003758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <vPortFree+0xb0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <vPortFree+0xb0>)
 8004d0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d0e:	6938      	ldr	r0, [r7, #16]
 8004d10:	f000 f86c 	bl	8004dec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d14:	f7fe fd2e 	bl	8003774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20001de4 	.word	0x20001de4
 8004d24:	20001ddc 	.word	0x20001ddc

08004d28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <prvHeapInit+0xac>)
 8004d36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3307      	adds	r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <prvHeapInit+0xac>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <prvHeapInit+0xb0>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <prvHeapInit+0xb0>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d74:	2208      	movs	r2, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <prvHeapInit+0xb4>)
 8004d88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <prvHeapInit+0xb4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <prvHeapInit+0xb4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	1ad2      	subs	r2, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvHeapInit+0xb4>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <prvHeapInit+0xb8>)
 8004db6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <prvHeapInit+0xbc>)
 8004dbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <prvHeapInit+0xc0>)
 8004dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc6:	601a      	str	r2, [r3, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	200011d0 	.word	0x200011d0
 8004dd8:	20001dd0 	.word	0x20001dd0
 8004ddc:	20001dd8 	.word	0x20001dd8
 8004de0:	20001de0 	.word	0x20001de0
 8004de4:	20001ddc 	.word	0x20001ddc
 8004de8:	20001de4 	.word	0x20001de4

08004dec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <prvInsertBlockIntoFreeList+0xa8>)
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e002      	b.n	8004e00 <prvInsertBlockIntoFreeList+0x14>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d8f7      	bhi.n	8004dfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d108      	bne.n	8004e2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	441a      	add	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d118      	bne.n	8004e74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <prvInsertBlockIntoFreeList+0xac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d00d      	beq.n	8004e6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e008      	b.n	8004e7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvInsertBlockIntoFreeList+0xac>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e003      	b.n	8004e7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d002      	beq.n	8004e8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	20001dd0 	.word	0x20001dd0
 8004e98:	20001dd8 	.word	0x20001dd8

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	4d0c      	ldr	r5, [pc, #48]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea2:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	f000 f88c 	bl	8004fc8 <_init>
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	4d0a      	ldr	r5, [pc, #40]	; (8004edc <__libc_init_array+0x40>)
 8004eb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	0800587c 	.word	0x0800587c
 8004ed8:	0800587c 	.word	0x0800587c
 8004edc:	0800587c 	.word	0x0800587c
 8004ee0:	08005880 	.word	0x08005880

08004ee4 <__itoa>:
 8004ee4:	1e93      	subs	r3, r2, #2
 8004ee6:	2b22      	cmp	r3, #34	; 0x22
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	460c      	mov	r4, r1
 8004eec:	d904      	bls.n	8004ef8 <__itoa+0x14>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	461c      	mov	r4, r3
 8004ef2:	700b      	strb	r3, [r1, #0]
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	bd10      	pop	{r4, pc}
 8004ef8:	2a0a      	cmp	r2, #10
 8004efa:	d109      	bne.n	8004f10 <__itoa+0x2c>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	da07      	bge.n	8004f10 <__itoa+0x2c>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	700b      	strb	r3, [r1, #0]
 8004f04:	2101      	movs	r1, #1
 8004f06:	4240      	negs	r0, r0
 8004f08:	4421      	add	r1, r4
 8004f0a:	f000 f81b 	bl	8004f44 <__utoa>
 8004f0e:	e7f1      	b.n	8004ef4 <__itoa+0x10>
 8004f10:	2100      	movs	r1, #0
 8004f12:	e7f9      	b.n	8004f08 <__itoa+0x24>

08004f14 <itoa>:
 8004f14:	f7ff bfe6 	b.w	8004ee4 <__itoa>

08004f18 <memcpy>:
 8004f18:	440a      	add	r2, r1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f20:	d100      	bne.n	8004f24 <memcpy+0xc>
 8004f22:	4770      	bx	lr
 8004f24:	b510      	push	{r4, lr}
 8004f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f30:	d1f9      	bne.n	8004f26 <memcpy+0xe>
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <memset>:
 8004f34:	4603      	mov	r3, r0
 8004f36:	4402      	add	r2, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <__utoa>:
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b08b      	sub	sp, #44	; 0x2c
 8004f48:	4605      	mov	r5, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	466e      	mov	r6, sp
 8004f4e:	4c1d      	ldr	r4, [pc, #116]	; (8004fc4 <__utoa+0x80>)
 8004f50:	f104 0c20 	add.w	ip, r4, #32
 8004f54:	4637      	mov	r7, r6
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	6861      	ldr	r1, [r4, #4]
 8004f5a:	3408      	adds	r4, #8
 8004f5c:	c703      	stmia	r7!, {r0, r1}
 8004f5e:	4564      	cmp	r4, ip
 8004f60:	463e      	mov	r6, r7
 8004f62:	d1f7      	bne.n	8004f54 <__utoa+0x10>
 8004f64:	7921      	ldrb	r1, [r4, #4]
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	7139      	strb	r1, [r7, #4]
 8004f6a:	1e91      	subs	r1, r2, #2
 8004f6c:	2922      	cmp	r1, #34	; 0x22
 8004f6e:	6038      	str	r0, [r7, #0]
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	d904      	bls.n	8004f80 <__utoa+0x3c>
 8004f76:	7019      	strb	r1, [r3, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	b00b      	add	sp, #44	; 0x2c
 8004f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f80:	1e58      	subs	r0, r3, #1
 8004f82:	4684      	mov	ip, r0
 8004f84:	fbb5 f7f2 	udiv	r7, r5, r2
 8004f88:	fb02 5617 	mls	r6, r2, r7, r5
 8004f8c:	3628      	adds	r6, #40	; 0x28
 8004f8e:	446e      	add	r6, sp
 8004f90:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004f94:	460c      	mov	r4, r1
 8004f96:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004f9a:	462e      	mov	r6, r5
 8004f9c:	42b2      	cmp	r2, r6
 8004f9e:	463d      	mov	r5, r7
 8004fa0:	f101 0101 	add.w	r1, r1, #1
 8004fa4:	d9ee      	bls.n	8004f84 <__utoa+0x40>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	545a      	strb	r2, [r3, r1]
 8004faa:	1919      	adds	r1, r3, r4
 8004fac:	1aa5      	subs	r5, r4, r2
 8004fae:	42aa      	cmp	r2, r5
 8004fb0:	dae3      	bge.n	8004f7a <__utoa+0x36>
 8004fb2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004fb6:	780e      	ldrb	r6, [r1, #0]
 8004fb8:	3201      	adds	r2, #1
 8004fba:	7006      	strb	r6, [r0, #0]
 8004fbc:	f801 5901 	strb.w	r5, [r1], #-1
 8004fc0:	e7f4      	b.n	8004fac <__utoa+0x68>
 8004fc2:	bf00      	nop
 8004fc4:	08005854 	.word	0x08005854

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
